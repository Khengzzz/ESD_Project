version: "3.8"

volumes:
  rabbitmq_data: 
  pgdata: 

networks:
  kong-net:
    driver: bridge

services:

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq

  #######################################
  # Screening
  #######################################
  screening:
    build:
      context: ./
      dockerfile: screening.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/screening
      PYTHONUNBUFFERED: 1
    ports:
      - "5000:5000"
    networks:
      - kong-net

  #######################################
  # Booking
  #######################################
  bookings:
    build:
      context: ./
      dockerfile: bookings.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/booking_management
      PYTHONUNBUFFERED: 1
    ports:
      - "5001:5001"
    networks:
      - kong-net

  #######################################
  # Subscriber
  #######################################
  subscriber:
    build:
      context: ./
      dockerfile: subscriber.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/subscriber
      PYTHONUNBUFFERED: 1
    ports:
      - "5003:5003"
    networks:
      - kong-net

  #######################################
  # Booking Orchestrator
  #######################################
  booking_orchestrator:
    build:
      context: ./
      dockerfile: booking_orchestrator.Dockerfile
    image: linyubin123/booking_orchestrator:esd
    restart: always
    environment:
      screening_URL_reserve: http://screening:5000/screenings/manage_seats/{screening_id}/reserve
      booking_URL_create: http://bookings:5001/bookings
      PYTHONUNBUFFERED: 1
    ports:
      - "5100:5100"
    networks:
      - kong-net
    depends_on:
      - bookings
      - screening

  #######################################
  # Payment Orchestrator
  #######################################
  payment_orchestrator:
    build:
      context: ./
      dockerfile: payment_orchestrator.Dockerfile
    image: linyubin123/payment_orchestrator:esd
    restart: always
    environment:
      seat_URL: http://screening:5000/screenings/manage_seats/{screening_id}/book
      booking_URL_get_booking: http://bookings:5001/bookings/{booking_id}
      booking_URL_confirm: http://bookings:5001/bookings/{booking_id}/confirm
      revert_seat_URL: http://screening:5000/screenings/manage_seats/{screening_id}/revert
      booking_URL_cancel: http://bookings:5001/bookings/{booking_id}/cancel
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/transactions
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    ports:
      - "5101:5101"
    networks:
      - kong-net
    depends_on:
      - bookings
      - screening
      - rabbitmq

  #######################################
  # Refund Orchestrator
  #######################################
  refund_orchestrator:
    build:
      context: ./
      dockerfile: refund_orchestrator.Dockerfile
    image: linyubin123/refund_orchestrator:esd
    restart: always
    environment:
      seat_URL: http://screening:5000/screenings/seats/{screening_id}
      refund_seat_URL: http://screening:5000/screenings/manage_seats/{screening_id}/refund
      booking_URL_get_booking: http://bookings:5001/bookings/{booking_id}
      booking_URL_refund: http://bookings:5001/bookings/{booking_id}/refund
      subscriber_URL: http://subscriber:5003/subscribers/subscriptions/{screening_id}
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/transactions
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    ports:
      - "5102:5102"
    networks:
      - kong-net
    depends_on:
      - bookings
      - screening
      - rabbitmq

  #######################################
  # Notification
  #######################################
  # notification:
  #   build:
  #     context: ./
  #     dockerfile: notification.Dockerfile
  #   restart: always
  #   depends_on:
  #     - rabbitmq
  #   environment:
  #     rabbit_host: rabbitmq
  #     rabbit_port: 5672
  #     PYTHONUNBUFFERED: 1
  #   networks:
  #     - kong-net

  #######################################
  # AMQP Setup
  #######################################
  # amqp_setup:
  #   build:
  #     context: ./
  #     dockerfile: amqp_setup.Dockerfile
  #   restart: always
  #   depends_on:
  #     - rabbitmq
  #   environment:
  #     rabbit_host: rabbitmq
  #     rabbit_port: 5672
  #     PYTHONUNBUFFERED: 1
  #   networks:
  #     - kong-net

  #######################################
  # Kong database and migration
  #######################################
  kong-database:
    image: postgres:15
    platform: linux/amd64
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  kong-migration:
    image: kong/kong-gateway:3.2.2.5
    platform: linux/amd64
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  kong:
    image: kong/kong-gateway:3.2.2.5
    platform: linux/amd64
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8446:8446"
      - "8004:8004"
      - "8447:8447"
