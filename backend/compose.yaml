volumes:
  rabbitmq_data: 
  pgdata: 
  prometheusdata:
  grafanadata:

networks:
  kong-net:
    driver: bridge
    name: kong-net

services:

  ####################################
  # RabbitMQ Messaging Broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - kong-net

  #######################################
  # App
  #######################################
  app:
    build:
      context: ./
      dockerfile: app.Dockerfile
    restart: always
    ports:
      - "1234:1234"
    networks:
      - kong-net

  #######################################
  # Screening Microservice
  #######################################
  screening:
    build:
      context: ./
      dockerfile: screening.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/screening
      PYTHONUNBUFFERED: 1
    ports:
      - "5000:5000"
    networks:
      - kong-net

  #######################################
  # Booking Microservice
  #######################################
  bookings:
    build:
      context: ./
      dockerfile: bookings.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/booking_management
      PYTHONUNBUFFERED: 1
    ports:
      - "5001:5001"
    networks:
      - kong-net

  #######################################
  # Subscriber Microservice
  #######################################
  subscriber:
    build:
      context: ./
      dockerfile: subscriber.Dockerfile
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/subscriber
      PYTHONUNBUFFERED: 1
    ports:
      - "5003:5003"
    networks:
      - kong-net

  #######################################
  # Booking Orchestrator
  #######################################
  booking_orchestrator:
    build:
      context: ./
      dockerfile: booking_orchestrator.Dockerfile
    image: linyubin123/booking_orchestrator:esd
    restart: always
    environment:
      screening_URL_reserve: http://screening:5000/screenings/manage_seats/{screening_id}/reserve
      booking_URL_create: http://bookings:5001/bookings
      PYTHONUNBUFFERED: 1
    ports:
      - "5100:5100"
    depends_on:
      - bookings
      - screening
    networks:
      - kong-net

  #######################################
  # Payment Orchestrator
  #######################################
  payment_orchestrator:
    build:
      context: ./
      dockerfile: payment_orchestrator.Dockerfile
    image: linyubin123/payment_orchestrator:esd
    restart: always
    environment:
      seat_URL: http://screening:5000/screenings/manage_seats/{screening_id}/book
      booking_URL_get_booking: http://bookings:5001/bookings/{booking_id}
      booking_URL_confirm: http://bookings:5001/bookings/{booking_id}/confirm
      revert_seat_URL: http://screening:5000/screenings/manage_seats/{screening_id}/revert
      booking_URL_cancel: http://bookings:5001/bookings/{booking_id}/cancel
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/transactions
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    ports:
      - "5101:5101"
    depends_on:
      - bookings
      - screening
      - rabbitmq
    networks:
      - kong-net

  #######################################
  # Refund Orchestrator
  #######################################
  refund_orchestrator:
    build:
      context: ./
      dockerfile: refund_orchestrator.Dockerfile
    image: linyubin123/refund_orchestrator:esd
    restart: always
    environment:
      seat_URL: http://screening:5000/screenings/seats/{screening_id}
      refund_seat_URL: http://screening:5000/screenings/manage_seats/{screening_id}/refund
      booking_URL_get_booking: http://bookings:5001/bookings/{booking_id}
      booking_URL_refund: http://bookings:5001/bookings/{booking_id}/refund
      subscriber_URL: http://subscriber:5003/subscribers/subscriptions/{screening_id}
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/transactions
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    ports:
      - "5102:5102"
    depends_on:
      - bookings
      - screening
      - rabbitmq
    networks:
      - kong-net

  #######################################
  # My Purchase Orchestrator
  #######################################
  my_purchase_orchestrator:
    build:
      context: ./
      dockerfile: my_purchase_orchestrator.Dockerfile
    image: linyubin123/my_purchase_orchestrator:esd
    restart: always
    environment:
      screening_details_URL: http://screening:5000/screenings/{screening_id}
      user_booking_URL: http://bookings:5001/bookings/user/{user_id}
      PYTHONUNBUFFERED: 1
    ports:
      - "5103:5103"
    depends_on:
      - bookings
      - screening
    networks:
      - kong-net

  #######################################
  # Notification Microservice
  #######################################
  notification:
    build:
      context: ./
      dockerfile: notification.Dockerfile
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    networks:
      - kong-net

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
      - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
      - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
      - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.



  #######################################
  # Prometheus
  #######################################
  prometheus:
    image: prom/prometheus:v2.49.1
    restart: always
    networks:
      - kong-net
    ports:
      - "9090:9090"
    volumes:
      - prometheusdata:/etc/prometheus


  #######################################
  # Grafana Open Source
  #######################################
  grafana:
    image: grafana/grafana-oss:10.2.3
    restart: always
    networks:
      - kong-net
    ports:
      - "13000:3000"
    volumes:
      - grafanadata:/var/lib/grafana
